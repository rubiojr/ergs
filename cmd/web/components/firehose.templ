package components

import (
	"github.com/rubiojr/ergs/cmd/web/components/types"
)

templ Firehose(data types.PageData) {
	@Layout(data) {
		<div class="firehose-page">
			@firehoseHeader()
			@firehoseResults(data)
			<script src="/static/firehose_live.js"></script>
		</div>
	}
}

// blocksPageHeader renders a generic blocks page header with icon, title and optional description
templ blocksPageHeader(title string, description string) {
	<div class="firehose-header">
		<h2>
			<svg class="header-icon" viewBox="0 0 24 24" fill="currentColor">
				<path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path>
			</svg>
			{ title }
			<span id="firehose-live-status" class="live-status live-dot" data-state="initializing" aria-label="Firehose connection status"></span>
		</h2>
		if description != "" {
			<p class="firehose-description">
				{ description }
			</p>
		}
	</div>
}

templ firehoseHeader() {
	@blocksPageHeader("Firehose", "Latest blocks across all datasources, ordered by creation time")
}

// firehoseResults renders the firehose results and pagination
templ firehoseResults(data types.PageData) {
	if len(data.Results) > 0 || len(data.FirehoseBlocks) > 0 {
		@firehoseBlocks(data)
	} else if data.Error != "" {
		@firehoseError(data.Error)
	} else {
		@noFirehoseResults()
	}
}

// resultsWithFirehosePagination renders firehose results and pagination


// firehoseBlocks renders a flat, globally time-ordered slice of blocks (FirehoseBlocks).
// Falls back to grouped Results map if FirehoseBlocks is empty (backward compatibility).
templ firehoseBlocks(data types.PageData) {
	<div class="firehose-blocks">
		if len(data.FirehoseBlocks) > 0 {
			for _, block := range data.FirehoseBlocks {
				@UnifiedBlock(block, ExtractDatasource(block))
			}
		} else {
			for dsName, blocks := range data.Results {
				for _, block := range blocks {
					@UnifiedBlock(block, dsName)
				}
			}
		}
	</div>
}

// firehosePagination renders the pagination controls


// firehoseError renders the error message
templ firehoseError(errorMsg string) {
	<div class="no-results">
		<h3>Error Loading Firehose</h3>
		<p>{ errorMsg }</p>
	</div>
}

// noFirehoseResults renders the no results message
templ noFirehoseResults() {
	<div class="no-results">
		<h3>Realtime Firehose Inactive</h3>
		<p>No live blocks are currently available.</p>
		<p>Enable the <code>event_socket_path</code> in your configuration and restart the <code>serve</code> (ingestion) and <code>web</code> processes to activate realtime streaming.</p>
		<p><a href="/datasources">View datasources</a> after enabling to verify new blocks are ingesting.</p>
	</div>
}
