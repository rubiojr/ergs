package components

import (
	"github.com/rubiojr/ergs/cmd/web/components/types"
	"net/url"
	"strconv"
)

// buildDatasourceParams creates URL parameters for selected datasources
func buildDatasourceParams(selectedDatasources []string) string {
	if len(selectedDatasources) == 0 {
		return ""
	}
	params := url.Values{}
	for _, ds := range selectedDatasources {
		params.Add("datasource", ds)
	}
	return params.Encode()
}

// isDatasourceSelected checks if a datasource is in the selected list
func isDatasourceSelected(datasourceName string, selectedDatasources []string) bool {
	for _, selected := range selectedDatasources {
		if selected == datasourceName {
			return true
		}
	}
	return false
}

templ Search(data types.PageData) {
	@Layout(data) {
		<div class="search-page">
			@searchHeader()
			@searchForm(data)
			@searchResults(data)
		</div>

		@searchScript()
	}
}

// searchHeader renders the page header with title and search icon
templ searchHeader() {
	<div class="search-header">
		<h2>
			<svg class="header-icon" viewBox="0 0 24 24" fill="currentColor">
				<path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path>
			</svg>
			Search Data
		</h2>
	</div>
}

// searchForm renders the search form with input and controls
templ searchForm(data types.PageData) {
	<form action="/search" method="GET" class="search-form">
		<div class="search-controls">
			<input
				type="text"
				name="q"
				class="search-input"
				placeholder="Search across all datasources..."
				value={ data.Query }
				autocomplete="off"
			/>
			<div class="form-row">
				@datasourceSelect(data)
				@limitSelect(data)
				<button type="submit" class="search-button">
					<svg viewBox="0 0 24 24" fill="currentColor">
						<path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path>
					</svg>
					Search
				</button>
			</div>
		</div>
	</form>
}

// datasourceSelect renders the multi-select dropdown for datasources
templ datasourceSelect(data types.PageData) {
	<select name="datasource" multiple class="datasource-select" id="datasource-select">
		for _, ds := range data.Datasources {
			<option
				value={ ds.Name }
				if isDatasourceSelected(ds.Name, data.SelectedDatasources) {
					selected
				}
			>
				{ ds.Name }
			</option>
		}
	</select>
}

// limitSelect renders the results per page selector
templ limitSelect(data types.PageData) {
	<select name="limit" class="limit-select">
		<option value="20" if data.PageSize == 20 { selected }>20</option>
		<option value="30" if data.PageSize == 30 || data.PageSize == 0 { selected }>30</option>
		<option value="50" if data.PageSize == 50 { selected }>50</option>
		<option value="100" if data.PageSize == 100 { selected }>100</option>
	</select>
}

// searchResults renders search results, no results, or help text
templ searchResults(data types.PageData) {
	if data.Query != "" {
		if len(data.Results) > 0 {
			@resultsWithPagination(data)
		} else {
			@noResults(data.Query)
		}
	} else {
		@searchHelp()
	}
}

// resultsWithPagination renders search results and pagination
templ resultsWithPagination(data types.PageData) {
	<div class="results-summary">
		<p>
			Found { strconv.Itoa(data.TotalCount) } results for "{ data.Query }" (Page
			{ strconv.Itoa(data.CurrentPage) } of { strconv.Itoa(data.TotalPages) })
		</p>
	</div>
	<div class="results-section">
		for datasource, blocks := range data.Results {
			if len(blocks) > 0 {
				@datasourceResult(datasource, blocks)
			}
		}
	</div>
	@pagination(data)
}

// datasourceResult renders results for a single datasource
templ datasourceResult(datasource string, blocks []types.WebBlock) {
	<div class="datasource-results">
		<h3 class="datasource-title">
			<a href={ templ.URL("/datasource/" + datasource) }>{ datasource }</a>
			<span class="result-count">({ strconv.Itoa(len(blocks)) } results)</span>
		</h3>
		<div class="blocks">
			for _, block := range blocks {
				@templ.Raw(block.FormattedText)
			}
		</div>
	</div>
}

// pagination renders the pagination controls
templ pagination(data types.PageData) {
	<div class="pagination">
		if data.CurrentPage > 1 {
			<a
				href={ templ.URL("/search?q=" + data.Query + "&" + buildDatasourceParams(data.SelectedDatasources) + "&limit=" + strconv.Itoa(data.PageSize) + "&page=" + strconv.Itoa(data.CurrentPage-1)) }
				class="pagination-btn"
			>← Previous</a>
		}
		<span class="page-info">Page { strconv.Itoa(data.CurrentPage) } of { strconv.Itoa(data.TotalPages) }</span>
		if data.HasNextPage {
			<a
				href={ templ.URL("/search?q=" + data.Query + "&" + buildDatasourceParams(data.SelectedDatasources) + "&limit=" + strconv.Itoa(data.PageSize) + "&page=" + strconv.Itoa(data.CurrentPage+1)) }
				class="pagination-btn"
			>Next →</a>
		}
	</div>
}

// noResults renders the no results message
templ noResults(query string) {
	<div class="no-results">
		<h3>No results found</h3>
		<p>No results found for "{ query }". Try different search terms.</p>
	</div>
}

// searchHelp renders the help text when no search has been performed
templ searchHelp() {
	<div class="search-help">
		<h3>Search Your Data</h3>
		<p>Enter a search query above to find content across all your datasources.</p>
		<p>
			<a href="/datasources">Browse datasources individually</a> or use
			the search above to find specific content.
		</p>
	</div>
}



// searchScript contains the JavaScript for search functionality
templ searchScript() {
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			initializeChoices();
			addKeyboardShortcuts();
		});

		function initializeChoices() {
			const datasourceSelect = document.getElementById('datasource-select');
			if (!datasourceSelect) return;

			const choices = new Choices(datasourceSelect, {
				removeItemButton: true,
				searchEnabled: true,
				searchPlaceholderValue: 'Search datasources...',
				placeholder: false,
				noResultsText: 'No datasources found',
				noChoicesText: 'No datasources available',
				itemSelectText: 'Press to select'
			});

			setupCustomPlaceholder(choices);
		}

		function setupCustomPlaceholder(choices) {
			function updatePlaceholder() {
				const choicesInner = document.querySelector('.choices__inner');
				const selectedItems = choices.getValue();
				let placeholder = choicesInner.querySelector('.custom-placeholder');
				
				if (selectedItems.length === 0) {
					if (!placeholder) {
						placeholder = document.createElement('div');
						placeholder.className = 'custom-placeholder';
						placeholder.textContent = 'All datasources (leave empty to search all)';
						placeholder.style.cssText = 'color: #6c757d; pointer-events: none; position: absolute; left: 12px; top: 50%; transform: translateY(-50%);';
						choicesInner.style.position = 'relative';
						choicesInner.appendChild(placeholder);
					}
					placeholder.style.display = 'block';
				} else if (placeholder) {
					placeholder.style.display = 'none';
				}
			}

			// Listen for changes and update placeholder
			const select = document.getElementById('datasource-select');
			select.addEventListener('addItem', updatePlaceholder);
			select.addEventListener('removeItem', updatePlaceholder);
			
			// Initial update
			setTimeout(updatePlaceholder, 100);
		}

		function addKeyboardShortcuts() {
			document.addEventListener('keydown', function(e) {
				// Ctrl/Cmd + D to focus datasource select
				if ((e.ctrlKey || e.metaKey) && e.key === 'd') {
					e.preventDefault();
					const choicesInput = document.querySelector('.choices__input--cloned');
					if (choicesInput) {
						choicesInput.focus();
					}
				}
			});
		}
	</script>
}
