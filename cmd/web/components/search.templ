package components

import (
	"github.com/rubiojr/ergs/cmd/web/components/types"
	"net/url"
	"strconv"
)

// buildDatasourceParams creates URL parameters for selected datasources
func buildDatasourceParams(selectedDatasources []string) string {
	if len(selectedDatasources) == 0 {
		return ""
	}
	params := url.Values{}
	for _, ds := range selectedDatasources {
		params.Add("datasource", ds)
	}
	return params.Encode()
}

// buildDateParams creates URL parameters for date filters
func buildDateParams(data types.PageData) string {
	params := url.Values{}
	if data.StartDate != nil {
		params.Add("start_date", data.StartDate.Format("2006-01-02"))
	}
	if data.EndDate != nil {
		params.Add("end_date", data.EndDate.Format("2006-01-02"))
	}
	return params.Encode()
}

// isDatasourceSelected checks if a datasource is in the selected list
func isDatasourceSelected(datasourceName string, selectedDatasources []string) bool {
	for _, selected := range selectedDatasources {
		if selected == datasourceName {
			return true
		}
	}
	return false
}

// searchDescription builds the header description text
func searchDescription(data types.PageData) string {
	if data.Query != "" {
		return "Results matching \"" + data.Query + "\""
	}
	return "Search across all datasources"
}

templ Search(data types.PageData) {
	@Layout(data) {
		<div class="firehose-page">
			<div class="firehose-header">
				<h2>
					<svg class="header-icon" viewBox="0 0 24 24" fill="currentColor" role="img" aria-label="Search">
						<path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0016 9.5 6.5 6.5 0 109.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l4.75 4.75 1.25-1.25L15.5 14zM9.5 14A4.5 4.5 0 119.5 5a4.5 4.5 0 010 9z"></path>
					</svg>
					Search
				</h2>
				<p class="firehose-description">
					{ searchDescription(data) }
				</p>
			</div>
			@searchForm(data)
			@searchResultsFirehoseStyle(data)
		</div>
		@searchScript()
	}
}

// searchForm renders the search form with input and controls
templ searchForm(data types.PageData) {
	<form action="/search" method="GET" class="search-form">
		<div class="search-controls">
			<div class="search-input-row">
				<input
					type="text"
					name="q"
					class="search-input"
					placeholder="Search across all datasources..."
					value={ data.Query }
					autocomplete="off"
				/>
				<button type="submit" class="search-button">
					<svg viewBox="0 0 24 24" fill="currentColor">
						<path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path>
					</svg>
					Search
				</button>
			</div>
			@advancedSearchToggle()
			@advancedSearchSection(data)
		</div>
	</form>
}

// datasourceSelect renders the multi-select dropdown for datasources
templ datasourceSelect(data types.PageData) {
	<select name="datasource" multiple class="datasource-select" id="datasource-select">
		for _, ds := range data.Datasources {
			<option
				value={ ds.Name }
				if isDatasourceSelected(ds.Name, data.SelectedDatasources) {
					selected
				}
			>
				{ ds.Name }
			</option>
		}
	</select>
}

// limitSelect renders the results per page selector
templ limitSelect(data types.PageData) {
	<select name="limit" id="limit-select" class="limit-select">
		<option value="20" if data.PageSize == 20 { selected }>20</option>
		<option value="30" if data.PageSize == 30 || data.PageSize == 0 { selected }>30</option>
		<option value="50" if data.PageSize == 50 { selected }>50</option>
		<option value="100" if data.PageSize == 100 { selected }>100</option>
	</select>
}

// advancedSearchToggle renders the toggle button for advanced search
templ advancedSearchToggle() {
	<div class="advanced-search-toggle">
		<button type="button" id="advanced-search-btn" class="advanced-toggle-btn">
			<svg class="chevron-icon" viewBox="0 0 24 24" fill="currentColor">
				<path d="M7.41 8.84L12 13.42l4.59-4.58L18 10.25l-6 6-6-6z"></path>
			</svg>
			Advanced Search
		</button>
	</div>
}

// advancedSearchSection renders the collapsible advanced search controls
templ advancedSearchSection(data types.PageData) {
	<div id="advanced-search-section" class="advanced-search-section" style="display: none;">
		<h4>Filter Options</h4>
		<div class="advanced-controls">
			<div class="control-group">
				<label for="datasource-select">Datasources:</label>
				@datasourceSelect(data)
			</div>
			<div class="control-group">
				<label>Date Range:</label>
				@dateFilters(data)
			</div>
			<div class="control-group limit-control">
				<label for="limit-select">Results per page:</label>
				@limitSelect(data)
			</div>
		</div>
	</div>
}

// dateFilters renders the date range input fields
templ dateFilters(data types.PageData) {
	<div class="date-filters">
		<label for="start_date">From:</label>
		<input
			type="date"
			id="start_date"
			name="start_date"
			class="date-input"
			if data.StartDate != nil {
				value={ data.StartDate.Format("2006-01-02") }
			}
		/>
		<label for="end_date">To:</label>
		<input
			type="date"
			id="end_date"
			name="end_date"
			class="date-input"
			if data.EndDate != nil {
				value={ data.EndDate.Format("2006-01-02") }
			}
		/>
	</div>
}

// searchResultsFirehoseStyle renders search results using the firehose layout
templ searchResultsFirehoseStyle(data types.PageData) {
	if data.Query == "" {
		@searchHelp()
	} else if len(data.Results) == 0 {
		@noResults(data.Query)
	} else {
		<div class="results-summary">
			<p>
				Found { strconv.Itoa(data.TotalCount) } results for "{ data.Query }" (Page { strconv.Itoa(data.CurrentPage) })
			</p>
		</div>
		<div class="results-section">
			<div class="firehose-blocks">
				for datasource, blocks := range data.Results {
					for _, block := range blocks {
						@UnifiedBlock(block, datasource)
					}
				}
			</div>
		</div>
		<div class="pagination">
			if data.CurrentPage > 1 {
				<a
					href={ templ.URL("/search?q=" + data.Query + "&" + buildDatasourceParams(data.SelectedDatasources) + "&" + buildDateParams(data) + "&limit=" + strconv.Itoa(data.PageSize) + "&page=" + strconv.Itoa(data.CurrentPage-1)) }
					class="pagination-btn"
				>← Previous</a>
			}
			<span class="page-info">
				Page { strconv.Itoa(data.CurrentPage) }
			</span>
			if data.HasNextPage {
				<a
					href={ templ.URL("/search?q=" + data.Query + "&" + buildDatasourceParams(data.SelectedDatasources) + "&" + buildDateParams(data) + "&limit=" + strconv.Itoa(data.PageSize) + "&page=" + strconv.Itoa(data.CurrentPage+1)) }
					class="pagination-btn"
				>Next →</a>
			}
		</div>
	}
}

// noResults renders the no results message
templ noResults(query string) {
	<div class="no-results">
		<h3>No results found</h3>
		<p>No results found for "{ query }". Try different search terms.</p>
	</div>
}

// searchHelp renders the help text when no search has been performed
templ searchHelp() {
	<div class="no-results">
		<h3>Search Your Data</h3>
		<p>Enter a search query above to find content across all your datasources.</p>
		<p>
			<a href="/datasources">Browse datasources individually</a> or use
			the search above to find specific content.
		</p>
	</div>
}



// searchScript contains the JavaScript for search functionality
templ searchScript() {
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			initializeChoices();
			addKeyboardShortcuts();
		});

		function initializeChoices() {
			const datasourceSelect = document.getElementById('datasource-select');
			if (datasourceSelect) {
				const choices = new Choices(datasourceSelect, {
					removeItemButton: true,
					searchEnabled: true,
					searchPlaceholderValue: 'Search datasources...',
					placeholder: false,
					noResultsText: 'No datasources found',
					noChoicesText: 'No datasources available',
					itemSelectText: 'Press to select'
				});

				setupCustomPlaceholder(choices);
			}

			// Initialize limit select
			const limitSelect = document.getElementById('limit-select');
			if (limitSelect) {
				new Choices(limitSelect, {
					searchEnabled: false,
					itemSelectText: '',
					shouldSort: false
				});
			}
		}

		function setupCustomPlaceholder(choices) {
			function updatePlaceholder() {
				const choicesInner = document.querySelector('.choices__inner');
				const selectedItems = choices.getValue();
				let placeholder = choicesInner.querySelector('.custom-placeholder');

				if (selectedItems.length === 0) {
					if (!placeholder) {
						placeholder = document.createElement('div');
						placeholder.className = 'custom-placeholder';
						placeholder.textContent = 'All datasources (leave empty to search all)';
						placeholder.style.cssText = 'color: var(--text-dim); pointer-events: none; position: absolute; left: 12px; top: 50%; transform: translateY(-50%); font-size: 0.8rem;';
						choicesInner.style.position = 'relative';
						choicesInner.appendChild(placeholder);
					}
					// Show placeholder only if no pills AND input empty
					const clonedInput = choicesInner.querySelector('.choices__input--cloned');
					const hasValue = clonedInput && clonedInput.value.trim().length > 0;
					const hasItems = selectedItems.length > 0;
					placeholder.style.display = (!hasValue && !hasItems) ? 'block' : 'none';
				} else if (placeholder) {
					const clonedInput = choicesInner.querySelector('.choices__input--cloned');
					const hasValue = clonedInput && clonedInput.value.trim().length > 0;
					const hasItems = selectedItems.length > 0;
					placeholder.style.display = (!hasValue && !hasItems) ? 'block' : 'none';
				}
			}

			// Listen for changes and update placeholder
			const select = document.getElementById('datasource-select');
			select.addEventListener('addItem', updatePlaceholder);
			select.addEventListener('removeItem', updatePlaceholder);
			// Also watch input changes to hide placeholder while typing before an item is created
			const clonedInput = document.querySelector('.choices__input--cloned');
			if (clonedInput) {
				clonedInput.addEventListener('input', updatePlaceholder);
				clonedInput.addEventListener('focus', updatePlaceholder);
				clonedInput.addEventListener('blur', updatePlaceholder);
			}

			// Initial update
			setTimeout(() => {
				updatePlaceholder();
				// Re-bind if Choices re-renders the cloned input
				const observer = new MutationObserver(() => {
					const ci = document.querySelector('.choices__input--cloned');
					if (ci && !ci.dataset._phBound) {
						ci.addEventListener('input', updatePlaceholder);
						ci.addEventListener('focus', updatePlaceholder);
						ci.addEventListener('blur', updatePlaceholder);
						ci.dataset._phBound = '1';
						updatePlaceholder();
					}
				});
				const inner = document.querySelector('.choices__inner');
				if (inner) observer.observe(inner, { subtree: true, childList: true });
			}, 120);
		}

		function addKeyboardShortcuts() {
			document.addEventListener('keydown', function(e) {
				// Ctrl/Cmd + D to focus datasource select
				if ((e.ctrlKey || e.metaKey) && e.key === 'd') {
					e.preventDefault();
					const choicesInput = document.querySelector('.choices__input--cloned');
					if (choicesInput) {
						choicesInput.focus();
					}
				}
			});
		}

		function initializeAdvancedSearch() {
			const toggleBtn = document.getElementById('advanced-search-btn');
			const advancedSection = document.getElementById('advanced-search-section');
			const chevronIcon = toggleBtn.querySelector('.chevron-icon');

			if (!toggleBtn || !advancedSection) return;

			// Get stored preference or check if advanced options are set
			const storageKey = 'ergs-advanced-search-expanded';
			let shouldExpand = false;

			// Check if user has manually set the preference
			const storedPreference = localStorage.getItem(storageKey);
			if (storedPreference !== null) {
				shouldExpand = storedPreference === 'true';
			} else {
				// Auto-expand only if advanced options are set and no preference stored
				const hasAdvancedOptions = document.querySelector('#datasource-select').value ||
										 document.querySelector('#start_date').value ||
										 document.querySelector('#end_date').value ||
										 (document.querySelector('#limit-select').value && document.querySelector('#limit-select').value !== '30');
				shouldExpand = hasAdvancedOptions;
			}

			toggleBtn.addEventListener('click', function() {
				const isHidden = advancedSection.style.display === 'none';

				if (isHidden) {
					advancedSection.style.display = 'block';
					toggleBtn.classList.add('expanded');
					chevronIcon.style.transform = 'rotate(180deg)';
					localStorage.setItem(storageKey, 'true');
				} else {
					advancedSection.style.display = 'none';
					toggleBtn.classList.remove('expanded');
					chevronIcon.style.transform = 'rotate(0deg)';
					localStorage.setItem(storageKey, 'false');
				}
			});

			// Apply initial state
			if (shouldExpand) {
				advancedSection.style.display = 'block';
				toggleBtn.classList.add('expanded');
				chevronIcon.style.transform = 'rotate(180deg)';
			}
		}

		// Initialize advanced search after DOM is loaded
		initializeAdvancedSearch();
	</script>
}
